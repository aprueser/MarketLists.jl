var documenterSearchIndex = {"docs":
[{"location":"exchange/#Exchange","page":"Exchange","title":"Exchange","text":"","category":"section"},{"location":"exchange/#getExchangeOptions","page":"Exchange","title":"getExchangeOptions","text":"","category":"section"},{"location":"exchange/","page":"Exchange","title":"Exchange","text":"getExchangeOptions","category":"page"},{"location":"exchange/#MarketLists.getExchangeOptions","page":"Exchange","title":"MarketLists.getExchangeOptions","text":"getExchangeOptions()::Vector{String}\n\nGet a List of all supported Exchanges. These are the Exchanges for which the getExchangeMembers function will return values.\n\nSee getExchangeMembers.\n\nExample\n\ngetExchangeOptions()\n3-element Vector{String}:\n \"NASDAQ\"\n \"NYSE\"\n \"AMEX\"\n\n\n\n\n\n","category":"function"},{"location":"exchange/#getExchangeMembers","page":"Exchange","title":"getExchangeMembers","text":"","category":"section"},{"location":"exchange/","page":"Exchange","title":"Exchange","text":"getExchangeMembers","category":"page"},{"location":"exchange/#MarketLists.getExchangeMembers","page":"Exchange","title":"MarketLists.getExchangeMembers","text":"getExchangeMembers(exchange::String)::Dict{Symbol, Union{String, Int16, Vector{UInt8}}}\n\nGet all Members of the given Exchange.  Supported Exchanges can be seen by calling the getExchangeOptions function. This method calls the nasdaq API at https://api.nasdaq.com/api to get the data.\n\nArguments\n\n– exchange::String: The name of the Exchange to fetch members for.\n\nExample\n\nGetting Data ...\nDict{Symbol, Union{Int16, String, Vector{UInt8}}} with 3 entries:\n  :code    => 200\n  :message => \"OK\"\n  :body    => \"{\"data\":{\"headers\":{\"symbol\":\"Symbol\",\"name\":\"Name\",\"lastsale\":\"Last Sale\",\"netchange\":\n  [...]\n\n\n\n\n\n","category":"function"},{"location":"exchange/#parseExchangeResponseToDataFrame","page":"Exchange","title":"parseExchangeResponseToDataFrame","text":"","category":"section"},{"location":"exchange/","page":"Exchange","title":"Exchange","text":"parseExchangeResponseToDataFrame","category":"page"},{"location":"exchange/#MarketLists.parseExchangeResponseToDataFrame","page":"Exchange","title":"MarketLists.parseExchangeResponseToDataFrame","text":"parseExchangeResponseToDataFrame(httpRet::Dict{Symbol, Union{String, Int16, Vector{UInt8}}}, exchange::String)::DataFrame\n\nParse the JSON result from the getExchangeMembers function into a DataFrame. If the getExchangeMembers function does not return HTTP 200, or the results can not be parsed the DataFrame will contain an error message.\n\nArguments\n\n– httpRet::Dict{Symbol, Union{String, Int16, Vector{UInt8}}}: The return from the getExchangeMembers function. – exchange::String: The name of the Exchange members were fetched for. This is used in determining how to parse the data.\n\nExample\n\nparseExchangeResponseToDataFrame(e, \"NYSE\")\n3012x11 DataFrame\n  Row | symbol  name                               lastsale    netchange   pctchange volume   marketCap   country       ipoYear          industry                           sector\n      | String  String                             Float64     Float64     Float64   Int64    Union       String        Nothing          String                             String\n  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n    1 | A       Agilent Technologies Inc. Common   140.33      -2.9        -2.025    1088380  4.1518e10   United States                  Electrical Products                Industrials\n    2 | AA      Alcoa Corporation Common Stock      50.17      -3.52       -6.556    6297138  8.87854e9                                  Metal Fabrications                 Industrials\n    3 | AAC     Ares Acquisition Corporation Cla    10.25      -0.01       -0.097      27539  1.28125e9                                  Blank Checks                       Finance\n    4 | AAIC    Arlington Asset Investment Corp      3.04       0.01        0.33       62580  8.62347e7   United States                  Real Estate Investment Trusts      Real Estate\n    [...]\n\n\n\n\n\n","category":"function"},{"location":"indexes/#Indexes","page":"Index ETF","title":"Indexes","text":"","category":"section"},{"location":"indexes/#getIndexOptions","page":"Index ETF","title":"getIndexOptions","text":"","category":"section"},{"location":"indexes/","page":"Index ETF","title":"Index ETF","text":"getIndexOptions","category":"page"},{"location":"indexes/#MarketLists.getIndexOptions","page":"Index ETF","title":"MarketLists.getIndexOptions","text":"function getIndexOptions()::Vector{Pair{String, String}}\n\nGet a list of all supported Index ETFs These are the ETF symbols for which the getIndexMembersFile function will return values.\n\nSee getIndexMembersFile.\n\nExample\n\ngetIndexOptions()\n12-element Vector{Pair{String, String}}:\n \"CQQQ\" => \"China Tech ETF\"\n  \"DGT\" => \"DOW Global\"\n  \"DIA\" => \"DOW 30\"\n  \"MDY\" => \"S&P 400\"\n \"ONEK\" => \"Russell 1000\"\n  \"QQQ\" => \"Nasdaq 100\"\n \"QQQJ\" => \"Nasdaq Next Gen 100\"\n  \"SLY\" => \"S&P 600\"\n  \"SMD\" => \"S&P 1000\"\n  \"SPY\" => \"S&P 500\"\n \"THRK\" => \"Russell 3000\"\n \"TWOK\" => \"Russell 2000\"\n\n\n\n\n\n","category":"function"},{"location":"indexes/#getIndexMembersFile","page":"Index ETF","title":"getIndexMembersFile","text":"","category":"section"},{"location":"indexes/","page":"Index ETF","title":"Index ETF","text":"getIndexMembersFile","category":"page"},{"location":"indexes/#MarketLists.getIndexMembersFile","page":"Index ETF","title":"MarketLists.getIndexMembersFile","text":"getIndexMembersFile(index::String)::Dict{Symbol, Union{String, Int16, Vector{UInt8}}}\n\nGet all Members of the given Index ETF.  Supported ETFs can be seen by calling the getIndexOptions function. This method used the State Street Global Advisors, and Invesco web pages to look up the ETF Membership information.\n\nThe results will be saved in an XSLX file for symbols serviced from State Street, and CSV for those from Invesco.\n\nArguments\n\n– index::String: The name of the Index ETF to fetch members for. \n\nExample\n\ni = getIndexMembersFile(\"DIA\")\nGetting holdings for DIA ... \nDict{Symbol, Union{Int16, String, Vector{UInt8}}} with 3 entries:\n  :file    => \"/tmp/holdings-daily-us-en-dia.xlsx\"\n  :code    => 200\n  :message => \"OK\"\n\n\n\n\n\n","category":"function"},{"location":"indexes/#parseIndexMembersFileToDataFrame","page":"Index ETF","title":"parseIndexMembersFileToDataFrame","text":"","category":"section"},{"location":"indexes/","page":"Index ETF","title":"Index ETF","text":"parseIndexMembersFileToDataFrame","category":"page"},{"location":"indexes/#MarketLists.parseIndexMembersFileToDataFrame","page":"Index ETF","title":"MarketLists.parseIndexMembersFileToDataFrame","text":"parseIndexMembersFileToDataFrame(httpRet::Dict{Symbol, Union{String, Int16, Vector{UInt8}}}, index::String)::DataFrame\n\nParse the file downloaded when calling the getIndexMembersFile function.\n\nArguments\n\n– httpRet::Dict{Symbol, Union{String, Int16, Vector{UInt8}}}: The return from the getIndexMembersFile function. – index::String: The name of the Index ETF members were fetched for. This is used in determining how to parse the data.\n\nExample\n\nparseIndexMembersFileToDataFrame(i, \"DIA\")\n31x8 DataFrame\n Row | symbol    name                               Identifier  SEDOL       Weight    Sector                  SharesHeld   Local Currency\n     | String    String                             String      String      Float64   String                  Float64      String\n ----------------------------------------------------------------------------------------------------------------------------------------\n   1 | UNH       UnitedHealth Group Incorporated    91324P10    2917766     9.47776   Health Care               5.64911e6  USD\n   2 | GS        Goldman Sachs Group Inc.           38141G10    2407966     7.03863   Financials                5.64911e6  USD\n   3 | HD        Home Depot Inc.                    43707610    2434209     5.8787    Consumer Discretionary    5.64911e6  USD\n   4 | MCD       McDonald's Corporation             58013510    2550707     5.33521   Consumer Discretionary    5.64911e6  USD\n\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MarketLists","category":"page"},{"location":"#MarketLists","page":"Home","title":"MarketLists","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MarketLists.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MarketLists]","category":"page"},{"location":"#MarketLists.getExchangeMembers-Tuple{String}","page":"Home","title":"MarketLists.getExchangeMembers","text":"getExchangeMembers(exchange::String)::Dict{Symbol, Union{String, Int16, Vector{UInt8}}}\n\nGet all Members of the given Exchange.  Supported Exchanges can be seen by calling the getExchangeOptions function. This method calls the nasdaq API at https://api.nasdaq.com/api to get the data.\n\nArguments\n\n– exchange::String: The name of the Exchange to fetch members for.\n\nExample\n\nGetting Data ...\nDict{Symbol, Union{Int16, String, Vector{UInt8}}} with 3 entries:\n  :code    => 200\n  :message => \"OK\"\n  :body    => \"{\"data\":{\"headers\":{\"symbol\":\"Symbol\",\"name\":\"Name\",\"lastsale\":\"Last Sale\",\"netchange\":\n  [...]\n\n\n\n\n\n","category":"method"},{"location":"#MarketLists.getExchangeOptions-Tuple{}","page":"Home","title":"MarketLists.getExchangeOptions","text":"getExchangeOptions()::Vector{String}\n\nGet a List of all supported Exchanges. These are the Exchanges for which the getExchangeMembers function will return values.\n\nSee getExchangeMembers.\n\nExample\n\ngetExchangeOptions()\n3-element Vector{String}:\n \"NASDAQ\"\n \"NYSE\"\n \"AMEX\"\n\n\n\n\n\n","category":"method"},{"location":"#MarketLists.getIndexMembersFile-Tuple{String}","page":"Home","title":"MarketLists.getIndexMembersFile","text":"getIndexMembersFile(index::String)::Dict{Symbol, Union{String, Int16, Vector{UInt8}}}\n\nGet all Members of the given Index ETF.  Supported ETFs can be seen by calling the getIndexOptions function. This method used the State Street Global Advisors, and Invesco web pages to look up the ETF Membership information.\n\nThe results will be saved in an XSLX file for symbols serviced from State Street, and CSV for those from Invesco.\n\nArguments\n\n– index::String: The name of the Index ETF to fetch members for. \n\nExample\n\ni = getIndexMembersFile(\"DIA\")\nGetting holdings for DIA ... \nDict{Symbol, Union{Int16, String, Vector{UInt8}}} with 3 entries:\n  :file    => \"/tmp/holdings-daily-us-en-dia.xlsx\"\n  :code    => 200\n  :message => \"OK\"\n\n\n\n\n\n","category":"method"},{"location":"#MarketLists.getIndexOptions-Tuple{}","page":"Home","title":"MarketLists.getIndexOptions","text":"function getIndexOptions()::Vector{Pair{String, String}}\n\nGet a list of all supported Index ETFs These are the ETF symbols for which the getIndexMembersFile function will return values.\n\nSee getIndexMembersFile.\n\nExample\n\ngetIndexOptions()\n12-element Vector{Pair{String, String}}:\n \"CQQQ\" => \"China Tech ETF\"\n  \"DGT\" => \"DOW Global\"\n  \"DIA\" => \"DOW 30\"\n  \"MDY\" => \"S&P 400\"\n \"ONEK\" => \"Russell 1000\"\n  \"QQQ\" => \"Nasdaq 100\"\n \"QQQJ\" => \"Nasdaq Next Gen 100\"\n  \"SLY\" => \"S&P 600\"\n  \"SMD\" => \"S&P 1000\"\n  \"SPY\" => \"S&P 500\"\n \"THRK\" => \"Russell 3000\"\n \"TWOK\" => \"Russell 2000\"\n\n\n\n\n\n","category":"method"},{"location":"#MarketLists.parseExchangeResponseToDataFrame-Tuple{Dict{Symbol, Union{Int16, String, Vector{UInt8}}}, String}","page":"Home","title":"MarketLists.parseExchangeResponseToDataFrame","text":"parseExchangeResponseToDataFrame(httpRet::Dict{Symbol, Union{String, Int16, Vector{UInt8}}}, exchange::String)::DataFrame\n\nParse the JSON result from the getExchangeMembers function into a DataFrame. If the getExchangeMembers function does not return HTTP 200, or the results can not be parsed the DataFrame will contain an error message.\n\nArguments\n\n– httpRet::Dict{Symbol, Union{String, Int16, Vector{UInt8}}}: The return from the getExchangeMembers function. – exchange::String: The name of the Exchange members were fetched for. This is used in determining how to parse the data.\n\nExample\n\nparseExchangeResponseToDataFrame(e, \"NYSE\")\n3012x11 DataFrame\n  Row | symbol  name                               lastsale    netchange   pctchange volume   marketCap   country       ipoYear          industry                           sector\n      | String  String                             Float64     Float64     Float64   Int64    Union       String        Nothing          String                             String\n  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n    1 | A       Agilent Technologies Inc. Common   140.33      -2.9        -2.025    1088380  4.1518e10   United States                  Electrical Products                Industrials\n    2 | AA      Alcoa Corporation Common Stock      50.17      -3.52       -6.556    6297138  8.87854e9                                  Metal Fabrications                 Industrials\n    3 | AAC     Ares Acquisition Corporation Cla    10.25      -0.01       -0.097      27539  1.28125e9                                  Blank Checks                       Finance\n    4 | AAIC    Arlington Asset Investment Corp      3.04       0.01        0.33       62580  8.62347e7   United States                  Real Estate Investment Trusts      Real Estate\n    [...]\n\n\n\n\n\n","category":"method"},{"location":"#MarketLists.parseIndexMembersFileToDataFrame-Tuple{Dict{Symbol, Union{Int16, String, Vector{UInt8}}}, String}","page":"Home","title":"MarketLists.parseIndexMembersFileToDataFrame","text":"parseIndexMembersFileToDataFrame(httpRet::Dict{Symbol, Union{String, Int16, Vector{UInt8}}}, index::String)::DataFrame\n\nParse the file downloaded when calling the getIndexMembersFile function.\n\nArguments\n\n– httpRet::Dict{Symbol, Union{String, Int16, Vector{UInt8}}}: The return from the getIndexMembersFile function. – index::String: The name of the Index ETF members were fetched for. This is used in determining how to parse the data.\n\nExample\n\nparseIndexMembersFileToDataFrame(i, \"DIA\")\n31x8 DataFrame\n Row | symbol    name                               Identifier  SEDOL       Weight    Sector                  SharesHeld   Local Currency\n     | String    String                             String      String      Float64   String                  Float64      String\n ----------------------------------------------------------------------------------------------------------------------------------------\n   1 | UNH       UnitedHealth Group Incorporated    91324P10    2917766     9.47776   Health Care               5.64911e6  USD\n   2 | GS        Goldman Sachs Group Inc.           38141G10    2407966     7.03863   Financials                5.64911e6  USD\n   3 | HD        Home Depot Inc.                    43707610    2434209     5.8787    Consumer Discretionary    5.64911e6  USD\n   4 | MCD       McDonald's Corporation             58013510    2550707     5.33521   Consumer Discretionary    5.64911e6  USD\n\n\n\n\n\n\n","category":"method"}]
}
